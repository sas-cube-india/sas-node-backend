generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String       @id @default(uuid())
  email                   String       @unique
  password                String
  name                    String
  profilePic              String?
  contact                 String?
  role                    Role         @default(CUSTOMER)
  projects                Project[]    @relation("CustomerProjects")
  developerAssignments    Assignment[] @relation("DeveloperAssignments")
  consultantAssignments   Assignment[] @relation("ConsultantAssignments")
  uploadedFiles           File[]       @relation("UploadedFiles")
  sentMessages            Message[]    @relation("SentMessages")
  consultantReviews       Review[]     @relation("ConsultantReviews")
  reviewerReviews         Review[]     @relation("ReviewerReviews")
  paymentHistory          Payment[]    @relation("UserPayments")
  createdAt               DateTime     @default(now())
  updatedAt               DateTime     @updatedAt

  // Optional Role Fields
  skills                  String[]     // For Developer
  portfolioUrl            String?      // For Developer
  expertiseArea           String?      // For Consultant

  @@index([role])
}

model Project {
  id            String       @id @default(uuid())
  title         String
  summary       String
  description   String
  status        String       @default("New")
  techStack     String[]
  budget        Float
  timeline      String
  milestones    Milestone[]
  customer      User         @relation("CustomerProjects", fields: [customerId], references: [id])
  customerId    String
  assignments   Assignment[]
  files         File[]
  payments      Payment[]
  githubRepoUrl String?
  stagingUrl    String?
  messages      Message[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model Assignment {
  id              String   @id @default(uuid())
  project         Project  @relation(fields: [projectId], references: [id])
  projectId       String
  developer       User?    @relation("DeveloperAssignments", fields: [developerId], references: [id])
  developerId     String?
  consultant      User?    @relation("ConsultantAssignments", fields: [consultantId], references: [id])
  consultantId    String?
  assignedAt      DateTime @default(now())
}

model Milestone {
  id        String   @id @default(uuid())
  name      String
  due       DateTime
  status    String   @default("Pending")
  project   Project  @relation(fields: [projectId], references: [id])
  projectId String
}

model Payment {
  id          String   @id @default(uuid())
  amount      Float
  project     Project  @relation(fields: [projectId], references: [id])
  projectId   String
  customer    User     @relation("UserPayments", fields: [customerId], references: [id])
  customerId  String
  paidAt      DateTime @default(now())
  status      String   @default("Pending")
}

model File {
  id           String   @id @default(uuid())
  url          String
  name         String
  project      Project  @relation(fields: [projectId], references: [id])
  projectId    String
  uploadedBy   User     @relation("UploadedFiles", fields: [uploadedById], references: [id])
  uploadedById String
  createdAt    DateTime @default(now())
}

model Message {
  id        String   @id @default(uuid())
  content   String
  project   Project  @relation(fields: [projectId], references: [id])
  projectId String
  sender    User     @relation("SentMessages", fields: [senderId], references: [id])
  senderId  String
  createdAt DateTime @default(now())
}

model Review {
  id            String   @id @default(uuid())
  consultant    User     @relation("ConsultantReviews", fields: [consultantId], references: [id])
  consultantId  String
  reviewer      User     @relation("ReviewerReviews", fields: [reviewerId], references: [id])
  reviewerId    String
  rating        Int
  comment       String
  createdAt     DateTime @default(now())
}

enum Role {
  ADMIN
  CUSTOMER
  DEVELOPER
  CONSULTANT
}
